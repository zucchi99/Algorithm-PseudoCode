/*
    Disjointed sets implemented with trees
    tree root is the is the set representative
    this is the optimized implementation with Union by Rank and Path Compression
    rank >= tree height
    complexity:
    m MUF with n make = O(m * α(n)):
        n = θ(n) make:     θ(n) * θ(1)  ==> O(m) worst case
        f = O(m) find:     O(m) * α(n)  ==> O(m * α(n)) worst case
        u = O(n) union:    O(n) * α(n)  ==> O(n * α(n)) worst case
    O(m) + O(m * α(n)) + O(n α(n)) = O(m * α(n))
    
    Theorem:
        m MUF with n make = O(m * α(n))
        where α(n) is the inverse of Ackermann Function
        PC_Rank_Union(x, y) costs α(n):
            O(|Sx| + |Sy|) = α(n)
        PC_Rank_Find(x) costs α(n):
            O(|Sx|) = α(n)
*/

struct Rank_Tree_Set {
    key
    parent
    rank
}

Rank_Make(x) { //θ(1)
    x.parent = x
    x.rank = 1
    return x
}

PC_Rank_Find(x) { //O(|Sx|) = α(n)
    if(x != x.parent) {
        x.parent = PC_Rank_Find(x.parent)
    }
    return x.parent
}

PC_Rank_Union(x, y) { //O(|Sx| + |Sy|) = α(n)
    w = PC_Rank_Find(x) //O(|Sx|)
    z = PC_Rank_Find(y) //O(|Sy|)
    if(w != z) {
        if(z.rank > w.rank) {
            w.parent = z
        } else {
            z.parent = w
            if(w.rank == z.rank) {
                w.rank++
            }
        }
    }
    return z
}