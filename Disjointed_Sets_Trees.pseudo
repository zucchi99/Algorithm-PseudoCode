/*
    Disjointed sets implemented with trees
    tree root is the is the set representative
    this is the classic implementation. no optimizations.
    complexity:
    m MUF with n make = O(m * n):
        n = θ(n) make:     θ(n) * θ(1) ==> O(m) worst case
        f = O(m) find:     O(m) * O(n) ==> O(m * n) worst case
        u = O(n) union:    O(n) * O(n) ==> O(n^2) worst case
    O(m) + O(m * n) + O(n^2) = O(m * n)
*/

struct Tree_Set {
    key
    parent
}

Make(x) { //θ(1)
    x.parent = x
    return x
}

Find(x) { //O(|Sx|) = O(n)
    while(x.parent != x) {
        x = x.parent
    }
    return x
}

Union(x, y) { //O(|Sx| + |Sy|) = O(n)
    w = Find(x) //O(|Sx|)
    z = Find(y) //O(|Sy|)
    if(w != z) {
        w.parent = z
    }
    return z
}