/*
Esercizio 2.
Sia G = (V;E) un grafo orientato.
 Scrivere lo pseudocodice di una procedura efficiente che, dato G in input, restituisca un nodo x di G che raggiunge il
minimo numero di nodi di G. Nel caso esistano piu scelte possibili per x, una qualsiasi va bene.
Nota: Anche se si utilizzano procedure viste a lezione occorre scriverne lo pseudocodice interamente.
 Si determini la complessita e si dimostri la correttezza della procedura proposta.
*/

/*
complexity (depends cost of kosaraju implementing lists)
    Î¸(|V|) + Î¸(|E|) + Î¸(|V|) + Î¸(|E|) = Î¸(|V|) + Î¸(|E|)
*/


Less_Number_Of_Nodes_Reachable_Graph(G) {
    /*
        SCC_Kosaraju(G) returns a list of list of disjointed sets of SCC
        sets are implemented as lists with weighted
        BUT union and find costs Î¸(1):
            union: (done only in kosaraju) 
                always union SCC with one node so: 
                O(min (|Sx|, |Sy|)) = O(min(|SCC|, |v| = 1))
            find:
                return x.rap = Î¸(1)
        each node is in a SCC
        find the SCC of the node v with Find(v)
    */
    SCC = SCC_Kosaraju(G) //o(|E|log|V|) (si incrementa la complessita con i sets??)
    foreach (scc in SCC) { //O(|V|)
        r[scc] = |scc| //reachable nodes, initially only the scc itself
        //color[scc] = BIANCO
    }
    min = INFINITE
    sccMin = NULL
    foreach(scc in SCC) { //O(|V| + |E|)
        hasOuterEdges = FALSE;
        while(u in scc && !hasOuterEdges) {
            while(v in Adj[u] && !hasOuterEdges) {
                hasOuterEdges = Find(v) != Find(u)
                r[scc] = INFINITE
            }
        }
        if(!hasOuterEdges && r[scc] < min) {
            min = r[scc]
            sccMin = scc
        }
    }
    return sccMin.first
    
    /*
    foreach (scc in SCC) { //O(|V|)
        if(color[scc] = BIANCO) {
            Number_Of_Nodes_Reachable(scc, SCC) //?
        }
    }
    foreach (scc in SCC) { //O(|V|)
        if(r[scc] < min) {
            min = r[scc]
            sccMin = scc
        }
    }
    print(child(sccMin)) //any node in sccMin is solution, get one
    */
}

//scc is the list of one of the SCC
//SCC is the list of all SCC in G
//SBAGLIATO ==> calcola certe scc due volte
//deve avere una complessita pari alla chiusura transitiva su G aciclico
Number_Of_Nodes_Reachable(scc, SCC) {
    color[scc] = GRIGIO
    foreach(u in scc) { //O(|V|) each iteration, in total Î¸(|V|)
        //foreach vertex in its scc
        foreach(v in Adj[u]) { //O(|E|) each iteration, in total Î¸(|E|)
            //foreach vertex pointed from a vertex in scc
            sccv = Find(v) //get v.rap: Î¸(1)
            if(scc != sccv) {
                //v is in another scc
                if(color[sccv] = BIANCO) {
                    r[sccv] += Number_Of_Nodes_Reachable(sccv, SCC)
                }
                r[scc] += r[sccv]
            }
        }
    }
    color[scc] = NERO
    return r[scc]
}