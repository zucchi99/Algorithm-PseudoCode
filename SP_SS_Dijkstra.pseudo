/*
    SSSP := Single Source Shortest Path
    consider: 
        min heap as queue
        adjacency lists to represent edges
    complexity:
        initialization:     θ(|V|)
        extract minimum:    O(|V| * log|V|)
        fix up heap:        O(|E| * log|V|)
    θ(|V|) + O(|V| * log|V|) + O(|E| * log|V|) = O(|E| * log|V|)
*/
SSSP_Dijkstra(G, s) { //O(|E| * log|V|)
    foreach (v in v) { //θ(|V|)
        pred[v] = NULL
        dw[v] = INFINITE
    }
    dw[s] = 0
    Q = V
    BuildMinHeap(Q, dw) //θ(|V|) (if implemented with min heap)
    while (Q != EMPTY) { //θ(|V|)
        u = ExtractMin(Q) //O(log|V|)
        foreach (v in Adj[u]) { //O(E) each iteration, in total θ(E)
            if (dw[v] > dw[u] + W[{u, v}]) {
                pred[v] = u
                dw[v] = dw[u] + W[{u, v}]
                HeapFixUp(Q, v) //O(log |V|) (if implemented with min heap)
            }
        }
    }
}